<#@ template hostspecific="true" debug="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="C:\Program Files (x86)\Microsoft Silverlight\5.1.10411.0\System.Windows.dll" #>
<#@ assembly name="C:\Program Files (x86)\Microsoft Silverlight\5.1.10411.0\System.ServiceModel.dll" #>
<#@ assembly name="C:\Program Files (x86)\Microsoft Silverlight\5.1.10411.0\System.Runtime.Serialization.dll" #>
<#@ assembly name="$(TargetPath)" #>
<#@ import namespace="PatrolControl.UI.Providers" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #> 
<#@ import namespace="System.Reflection" #> 
<#@ import namespace="System.Text" #> 
using System;
using System.Linq;
using System.Threading.Tasks;
using System.ComponentModel;
using PatrolControl.UI.PatrolControlServiceReference;
using ESRI.ArcGIS.Client.Geometry;

namespace PatrolControl.UI.Providers
{
<#
var assembly = System.Reflection.Assembly.GetAssembly(typeof(ICrud<>));

var types = assembly.GetTypes().Where(t=> IsCrud(t));

 foreach(var type in types){
	var crudInterface = GetCrudInterface(type);

	var name = crudInterface.GetGenericArguments()[0].Name;
	var isFeature = crudInterface.GetGenericTypeDefinition() == typeof(IFeatureProvider<>);
#>

	public partial class <#=type.Name#> : ProviderBase, <#=GetFullName(crudInterface)#>
	{

			public Task<<#=name#>[]> List()
        {
            var tcs = new TaskCompletionSource<<#=name#>[]>();
            EventHandler<Get<#=name#>sCompletedEventArgs> callback = null;

            callback = (sender, e) =>
            {
                Client.Get<#=name#>sCompleted -= callback;

                if (e.Error != null) tcs.TrySetException(e.Error);
                else if (e.Cancelled) tcs.TrySetCanceled();
                else tcs.TrySetResult(e.Result);
            };

            Client.Get<#=name#>sCompleted += callback;
            Client.Get<#=name#>sAsync();

            return tcs.Task;
        }

		public Task<<#=name#>> Get(int id)
        {
            var tcs = new TaskCompletionSource<<#=name#>>();
            EventHandler<Get<#=name#>CompletedEventArgs> callback = null;

            callback = (sender, e) =>
            {
                Client.Get<#=name#>Completed -= callback;

                if (e.Error != null) tcs.TrySetException(e.Error);
                else if (e.Cancelled) tcs.TrySetCanceled();
                else tcs.TrySetResult(e.Result);
            };

            Client.Get<#=name#>Completed += callback;
            Client.Get<#=name#>Async(id);

            return tcs.Task;
        }

	    public <#=name#> New()
        {
            return new <#=name#>();
        }

		public Task Save(<#=name#>[] entities)
        {
            var tcs = new TaskCompletionSource<object>();
            EventHandler<AsyncCompletedEventArgs> callback = null;

            callback = (sender, e) =>
            {
                Client.Update<#=name#>sCompleted -= callback;

                if (e.Error != null) tcs.TrySetException(e.Error);
                else if (e.Cancelled) tcs.TrySetCanceled();
                else tcs.TrySetResult(null);
            };

            Client.Update<#=name#>sCompleted += callback;
            Client.Update<#=name#>sAsync(entities.ToArray());

            return tcs.Task;
        }

		public Task Add(<#=name#>[] entities)
        {
            var tcs = new TaskCompletionSource<object>();
            EventHandler<AsyncCompletedEventArgs> callback = null;

            callback = (sender, e) =>
            {

                Client.AddUsersCompleted -= callback;

                if (e.Error != null) tcs.TrySetException(e.Error);
                else if (e.Cancelled) tcs.TrySetCanceled();
                else tcs.TrySetResult(null);

            };

            Client.Add<#=name#>sCompleted += callback;
            Client.Add<#=name#>sAsync(entities.ToArray());

            return tcs.Task;   
        }

		public Task Remove(<#=name#>[] entities)
        {
            var tcs = new TaskCompletionSource<object>();
            EventHandler<AsyncCompletedEventArgs> callback = null;

            callback = (sender, e) =>
            {

                Client.Delete<#=name#>sCompleted -= callback;

                if (e.Error != null) tcs.TrySetException(e.Error);
                else if (e.Cancelled) tcs.TrySetCanceled();
                else tcs.TrySetResult(null);

            };

            Client.Delete<#=name#>sCompleted += callback;
            Client.Delete<#=name#>sAsync(entities.ToArray());

            return tcs.Task;   
        }

<# if (isFeature)
	  { #>
	    public Task<<#=name#>[]> List(Envelope envelope)
        {
            var tcs = new TaskCompletionSource<<#=name#>[]>();
            EventHandler<Get<#=name#>sCompletedEventArgs> callback = null;

            callback = (sender, e) =>
            {
                Client.Get<#=name#>sCompleted -= callback;

                if (e.Error != null) tcs.TrySetException(e.Error);
                else if (e.Cancelled) tcs.TrySetCanceled();
                else tcs.TrySetResult(e.Result);
            };

            Client.Get<#=name#>sCompleted += callback;
            Client.Get<#=name#>sAsync();

            return tcs.Task;
        }
<#	  }#>
	}


<#
}
#>
}

<#+


Type GetCrudInterface(Type t)
{

var a = (PatrolControl.UI.Providers.GenerateProviderAttribute)t.GetCustomAttribute(typeof(GenerateProviderAttribute));
if (a==null) return null;

   return a.ProviderType;

}

bool IsCrud(Type t)
{
	return !t.IsInterface && GetCrudInterface(t) != null;
}

  string GetFullName(Type t)
{
    if (!t.IsGenericType)
        return t.Name;
    StringBuilder sb=new StringBuilder();

    sb.Append(t.Name.Substring(0, t.Name.LastIndexOf("`")));
    sb.Append(t.GetGenericArguments().Aggregate("<",

        delegate(string aggregate,Type type)
            {
                return aggregate + (aggregate == "<" ? "" : ",") + GetFullName(type);
            }  
        ));
    sb.Append(">");

    return sb.ToString();
}#>